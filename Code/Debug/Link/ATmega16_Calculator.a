;/*
; * ATmega16_Calculator.c
; *
; * Created: 5/29/2024 2:04:44 PM
; * Author: Peyman Roohi-Moghadam
; */
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdlib.h>
;#include <stdbool.h>
;#include <math.h>
;
;unsigned char typeBuffer[16] = "0";

	.DSEG
;unsigned int typeIndex = 0;
;bool notTyped = true;
;unsigned char promptStr[16] = "";
;char operator = '';
;float operand1=0, operand2=0, result=0;
;bool operand1IsNULL = true;
;bool hasDot = false;
;int temp = 0;
;
;void trimDecimals(char* str) { // for not shoing unne
; 0000 0019 void trimDecimals(char* str) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001A     for(temp = 15; temp>=0; temp--) {
;PCODE: $0000000F VOL: 0
;	*str -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001B         if (str[temp] == '\0') continue;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001C         else if (str[temp] == '0') str[temp] = '\0';
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001D         else if (str[temp] == '.') {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 001E             str[temp] = '\0';
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 001F             break;
;PCODE: $0000003A VOL: 0
; 0000 0020         } else break;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0021     }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0022 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;void clearTypeBuffer() {
; 0000 0024 void clearTypeBuffer() {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0025     typeBuffer[0] = '0';
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0026     for(temp=1;temp<16;temp++) {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0027         typeBuffer[temp] = '\0';
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0028     }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0029     typeIndex = 0;
;PCODE: $00000062 VOL: 0
; 0000 002A }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;void clearPromptLine() {
; 0000 002C void clearPromptLine() {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 002D     lcd_gotoxy(0,0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 002E     for(temp=0;temp<16;temp++) {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 002F         lcd_puts(" ");
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0030     }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0031 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0

	.DSEG
_0x13:
	.BYTE 0x2
;
;void clearTypeLine() {
; 0000 0033 void clearTypeLine() {

	.CSEG
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0034     lcd_gotoxy(0,1);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0035     for(temp=0;temp<16;temp++) {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0036         lcd_puts(" ");
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0037     }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0038     notTyped = true;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0039     hasDot = false;
;PCODE: $00000099 VOL: 0
; 0000 003A     clearTypeBuffer();
;PCODE: $0000009A VOL: 0
; 0000 003B }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0

	.DSEG
_0x17:
	.BYTE 0x2
;
;void showPrompt() {
; 0000 003D void showPrompt() {

	.CSEG
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 003E     clearPromptLine();
;PCODE: $0000009F VOL: 0
; 0000 003F     lcd_gotoxy(0,0);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0040     if(operator == 'r') lcd_putsf("sqrt{");
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0041     ftoa(operand1, 3, promptStr);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0042     //delay_ms(5);
; 0000 0043     trimDecimals(promptStr);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0044     lcd_puts(promptStr);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0045     if(operator){
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0046         if(operator == 'r') lcd_putsf("}");
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0047         else lcd_putchar(operator);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0048     }
;PCODE: $000000C1 VOL: 0
; 0000 0049 }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;
;void calculate(){
; 0000 004B void calculate(){
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 004C     // Complete Prompt
; 0000 004D     if (operator && operator != 'r' && operator != '%'){
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 004E         ftoa(operand2, 3, promptStr);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 004F         trimDecimals(promptStr);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0050         lcd_puts(promptStr);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0051     }
; 0000 0052     lcd_putsf("=");
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0053 
; 0000 0054     switch(operator){
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0055         case '+':
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0056             result = operand1 + operand2;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0057             break;
;PCODE: $000000E9 VOL: 0
; 0000 0058         case '-':
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0059             result = operand1 - operand2;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 005A             break;
;PCODE: $000000F1 VOL: 0
; 0000 005B         case '*':
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 005C             result = operand1 * operand2;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 005D             break;
;PCODE: $000000F9 VOL: 0
; 0000 005E         case '/':
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 005F             result = operand1 / operand2;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0060             break;
;PCODE: $00000101 VOL: 0
; 0000 0061         case '^':
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0062             result = pow(operand1, operand2);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0063             break;
;PCODE: $0000010A VOL: 0
; 0000 0064         case 'r':
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0065             result = sqrt(operand1);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0066             break;
;PCODE: $00000111 VOL: 0
; 0000 0067         case '%':
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0068             result = operand1 / 100;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0069             break;
;PCODE: $00000119 VOL: 0
; 0000 006A         default:
;PCODE: $0000011A VOL: 0
; 0000 006B             result = operand1;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 006C             break;
;PCODE: $0000011D VOL: 0
; 0000 006D     }
;PCODE: $0000011E VOL: 0
; 0000 006E     clearTypeLine();
;PCODE: $0000011F VOL: 0
; 0000 006F     lcd_gotoxy(0,1);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0070     ftoa(result, 3, typeBuffer);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0071     trimDecimals(typeBuffer);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0072     lcd_puts(typeBuffer);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0073     operand1 = NULL;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0074     operand1IsNULL = true;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0075 }
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;
;void nonDigitKeyPress(char nonDigitkey) {
; 0000 0077 void nonDigitKeyPress(char nonDigitkey) {
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0078     if (operand1IsNULL) {  // operand 1 is not set
;PCODE: $00000136 VOL: 0
;	nonDigitkey -> Y+0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0079         operand1 = atof(typeBuffer);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 007A         operand1IsNULL = false;
;PCODE: $0000013C VOL: 0
; 0000 007B         operator = (nonDigitkey == '=') ? operator : nonDigitkey;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 007C         showPrompt();
;PCODE: $00000147 VOL: 0
; 0000 007D         if(nonDigitkey == '=' || nonDigitkey == 'r' || nonDigitkey == '%'){
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 007E             calculate();
;PCODE: $00000153 VOL: 0
; 0000 007F         } else {  // no calculation, just set operand 1
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0080             clearTypeLine();
;PCODE: $00000156 VOL: 0
; 0000 0081             lcd_gotoxy(0,1);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0082             ftoa(operand1, 3, typeBuffer);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0083             trimDecimals(typeBuffer);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0084             lcd_puts(typeBuffer);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0085         }
;PCODE: $00000165 VOL: 0
; 0000 0086     } else {  // operand 1 is set
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0087         operand2 = atof(typeBuffer);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0088         if(nonDigitkey == '=') {  // calculation must be done
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0089             showPrompt();
;PCODE: $0000016E VOL: 0
; 0000 008A             calculate();
;PCODE: $0000016F VOL: 0
; 0000 008B         } else {
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 008C             if (notTyped) {
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 008D                 operator = nonDigitkey;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 008E                 showPrompt();
;PCODE: $00000176 VOL: 0
; 0000 008F             } else {
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0090                 calculate();
;PCODE: $00000179 VOL: 0
; 0000 0091                 nonDigitKeyPress(nonDigitkey);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0092             }
;PCODE: $0000017C VOL: 0
; 0000 0093         }
;PCODE: $0000017D VOL: 0
; 0000 0094     }
;PCODE: $0000017E VOL: 0
; 0000 0095 }
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;
;void main(void)
; 0000 0098 {
;PCODE: $00000182 VOL: 0
; 0000 0099 char key;
; 0000 009A int row = 0;
; 0000 009B int col = 0;
; 0000 009C unsigned char keys[4][6] = {
; 0000 009D     {'c', '7', '8', '9', '*', '/'},
; 0000 009E     {'^', '4', '5', '6', '-', 'R'},
; 0000 009F     {'%', '1', '2', '3', '+', 'M'},
; 0000 00A0     {'r', '0', '.', '=', '+', 'm'}
; 0000 00A1 };
; 0000 00A2 DDRB |= 0x0F;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;	key -> R17
;	row -> R18,R19
;	col -> R20,R21
;	keys -> Y+0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00A3 DDRC &= 0xC0;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00A4 lcd_init(16);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00A5 
; 0000 00A6 lcd_gotoxy(0,0);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00A7 lcd_putsf("Made with <3");
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00A8 delay_ms(1500);
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00A9 clearPromptLine();
;PCODE: $0000019D VOL: 0
; 0000 00AA 
; 0000 00AB lcd_gotoxy(0,1);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00AC lcd_puts(typeBuffer);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00AD 
; 0000 00AE while (1)
;PCODE: $000001A4 VOL: 0
; 0000 00AF     {
; 0000 00B0       // Cheking for key press
; 0000 00B1       for(row=0; row<4; row++){
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00B2         PORTB = 0x0F;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00B3         PORTB &= ~(1<<row);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00B4         for(col=0; col<6; col++){
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00B5            if(!(PINC&(1<<col))) break;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00B6         }
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00B7         delay_ms(15);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00B8         if (col<6) break;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00B9       }
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00BA       if(row==4) continue;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00BB       key = keys[row][col];
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 00BC 
; 0000 00BD       switch(key) {
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00BE         case 'c':
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 00BF             if (operand1IsNULL) clearPromptLine();
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00C0             clearTypeLine();
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00C1             lcd_gotoxy(0,1);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00C2             lcd_puts(typeBuffer);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00C3             break;
;PCODE: $000001F9 VOL: 0
; 0000 00C4         case '=':
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00C5         case '^':
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 00C6         case '%':
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 00C7         case 'r':
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00C8         case '*':
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 00C9         case '/':
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 00CA         case '-':
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 00CB         case '+':
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 00CC             nonDigitKeyPress(key);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 00CD             break;
;PCODE: $00000222 VOL: 0
; 0000 00CE 
; 0000 00CF         // TODO
; 0000 00D0         case 'R':
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 00D1         case 'M':
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 00D2         case 'm':
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 00D3             break;
;PCODE: $00000230 VOL: 0
; 0000 00D4 
; 0000 00D5         default: // Key is a digit
;PCODE: $00000231 VOL: 0
; 0000 00D6             if(notTyped){
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 00D7                 if (operand1IsNULL) clearPromptLine();
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 00D8                 clearTypeLine();
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 00D9                 notTyped = false;
;PCODE: $00000239 VOL: 0
; 0000 00DA             }
; 0000 00DB             if (key == '.'){
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 00DC                 if(typeIndex==0) typeIndex++;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 00DD                 else if (hasDot) break;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 00DE                 hasDot = true;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 00DF             }
; 0000 00E0             typeBuffer[typeIndex] = key;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 00E1             typeIndex = (typeIndex==0 && key=='0') ? typeIndex : typeIndex+1;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 00E2             lcd_gotoxy(0,1);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 00E3             lcd_puts(typeBuffer);
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 00E4       }
;PCODE: $00000267 VOL: 0
; 0000 00E5       delay_ms(200);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 00E6     }
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 00E7 }
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
